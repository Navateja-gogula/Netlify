pipeline {
    agent any

    tools {
        nodejs "NodeJS_18"
    }

    environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify_token')
        NETLIFY_SITE_ID = '915df1e5-27d7-4881-97bd-4087f9196c89'
        GITHUB_TOKEN = credentials('github_token') // GitHub token for PR creation
        REPO_URL = "https://github.com/Navateja-gogula/Netlify.git"
        PROD_BRANCH = "prod"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üîÑ Checking out code from GitHub..."
                    sh '''
                        git clone -b prod $REPO_URL Netlify || { echo "‚ùå Git clone failed"; exit 1; }
                        cd Netlify
                    '''
                }
            }
        }

        stage('Verify Node.js & npm') {
            steps {
                script {
                    echo "üîç Checking Node.js and npm versions..."
                    sh '''
                        which node || { echo "‚ùå Node.js not found!"; exit 1; }
                        which npm || { echo "‚ùå npm not found!"; exit 1; }
                        echo "‚úÖ Node.js Version: $(node -v)"
                        echo "‚úÖ npm Version: $(npm -v)"
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ Installing dependencies..."
                    sh '''
                        cd Netlify
                        npm install || { echo "‚ùå Failed to install dependencies"; exit 1; }
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "üß™ Running test cases..."
                    sh '''
                        cd Netlify
                        npm test || { echo "‚ùå Tests failed"; exit 1; }
                        echo "‚úÖ All tests passed!"
                    '''
                }
            }
        }

        stage('Push to Prod Branch & Create Pull Request') {
            steps {
                script {
                    echo "üìå Pushing code to prod branch and creating PR..."

                    sh '''
                        cd Netlify
                        git checkout prod
                        git pull origin prod
                        git merge main || { echo "‚ùå Merge failed"; exit 1; }
                        git push origin prod || { echo "‚ùå Git push failed"; exit 1; }

                        # Create PR using GitHub API
                        PR_RESPONSE=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/repos/Navateja-gogula/Netlify/pulls \
                            -d '{
                                "title": "Merge main into prod",
                                "head": "main",
                                "base": "prod",
                                "body": "Auto-generated pull request for merging main into prod."
                            }')

                        echo "‚úÖ Pull request created. Please review and merge manually."
                    '''
                }
            }
        }

        stage('Wait for PR Merge') {
            steps {
                script {
                    echo "‚è≥ Waiting for PR merge into prod..."
                    def prMerged = false

                    // Poll GitHub API and wait until PR is merged
                    while (!prMerged) {
                        echo "‚è≥ Checking if PR is merged..."
                        def prList = sh(script: 'curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/Navateja-gogula/Netlify/pulls', returnStdout: true).trim()

                        // Parse the response from GitHub API
                        def prInfo = readJSON text: prList

                        // Loop through PRs to check for a merged PR
                        prInfo.each { pr ->
                            if (pr.state == 'closed' && pr.merged == true) {
                                prMerged = true
                                echo "‚úÖ PR merged successfully!"
                            }
                        }

                        // If the PR is not merged, wait for 1 minute
                        if (!prMerged) {
                            echo "‚è≥ PR not merged yet, retrying in 1 minute..."
                            sleep 60
                        }
                    }
                }
            }
        }

        stage('Deploy to Netlify (Prod)') {
            steps {
                script {
                    echo "üöÄ Deploying to Netlify (Production)..."
                    sh '''
                        cd Netlify
                        git checkout prod
                        git pull origin prod
                        npm install -g netlify-cli
                        npx netlify deploy --dir=build --prod --auth=$NETLIFY_AUTH_TOKEN --site=$NETLIFY_SITE_ID || { echo "‚ùå Deployment failed"; exit 1; }
                        echo "‚úÖ Deployment successful!"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "üéâ ‚úÖ Deployment to production successful!"
        }
        failure {
            echo "‚ùå Deployment failed! Check logs for details."
        }
    }
}
